/* Generated with shader-compressor by NR4/Team210. */
#ifndef SFX_H
#define SFX_H
const char * sfx_frag =
"#version 130\n"
"#define PI radians(180.)\n"
"float clip(float a) { return clamp(a,-1.,1.); }\n"
"float theta(float x) { return smoothstep(0.,1e-3,clamp(x,0.,1e-3)); }\n"
"float _sin(float a) { return sin(2. * PI * mod(a,1.)); }\n"
"float _sq_(float a,float pwm) { return sign(2.*fract(a) - 1. + pwm); }\n"
"float _psq_(float a, float pwm) { return clip(50.*(_sin(a) - pwm)); } \n"
"float _tri(float a) { return (4.*abs(fract(a)-.5) - 1.); }\n"
"float freqC1(float note){ return 32.7 * pow(2., note/12.); }\n"
"float pseudorandom(float x) { return fract(sin(dot(vec2(x),vec2(12.9898,78.233))) * 43758.5453); }\n"
"float fhelp(float x) { return 1. + .333*x; } // 1. + .33333*x + .1*x*x + .02381*x*x*x + .00463*x*x*x*x;\n"
"\n"
"#define pat4(a,b,c,d,x) mod(x,1.)<.25 ? a : mod(x,1.)<.5 ? b : mod(x,1.) < .75 ? c : d\n"
"\n"
"#define NTIME 10\n"
"const float pos_B[10] = float[10](0.,4.,5.,6.,7.,8.,11.,11.5,12.,16.);\n"
"const float pos_t[10] = float[10](0.,8.,9.875,11.639706,13.306373,14.844834,19.130548,20.012901,21.166747,34.500081);\n"
"const float pos_BPS[9] = float[9](.5,.5333333333333333,.5666666288888913,.5999998800000239,.6500002275000797,.7000000466666697,.5666666288888924,.43333339111111824,.29999998500000075);\n"
"const float pos_SPB[9] = float[9](2.,1.875,1.7647060000000003,1.6666670000000003,1.5384609999999999,1.4285713333333334,1.7647059999999968,2.307692000000003,3.3333335);\n"
"float BPS, SPB, BT;\n"
"\n"
"const float Fsample = 44100.; // PRODUCTION: CHANGE THIS BACK TO 44100.\n"
"const float Tsample = 1./Fsample;\n"
"\n"
"const float filterthreshold = 1e-3;\n"
"\n"
"//TEXCODE\n"
"\n"
"float s_atan(float a) { return 2./PI * atan(a); }\n"
"float squarey(float a, float edge) { return abs(a) < edge ? a : floor(4.*a+.5)*.25; } \n"
"\n"
"float drop_phase(float time, float t1, float f0, float f1)\n"
"{\n"
"    float t = min(time, t1);\n"
"    float phi = f0*t + .5*(f1-f0)/t1*t*t;\n"
"\n"
"    if(time > t1)\n"
"    {\n"
"        phi += f1 * (time - t1);\n"
"    }\n"
"    return phi;\n"
"}\n"
"\n"
"float lpnoise(float t, float fq)\n"
"{\n"
"    t *= fq;\n"
"    float tt = fract(t);\n"
"    float tn = t - tt;\n"
"    return mix(pseudorandom(floor(tn) / fq), pseudorandom(floor(tn + 1.0) / fq), smoothstep(0.0, 1.0, tt));\n"
"}\n"
"\n"
"float reverb_phase(float t, float amt)\n"
"{\n"
"    float r = lpnoise(t, 100.0) + 0.2*lpnoise(t, 550.0) + 0.1*lpnoise(t, 1050.0)*exp(-5.*t);\n"
"    return amt * r;\n"
"}\n"
"\n"
"float env_AHDSR(float x, float L, float A, float H, float D, float S, float R)\n"
"{\n"
"    return (x<A ? x/A : x<A+H ? 1 : x<A+H+D ? (1. - (1.-S)*(x-H-A)/D) : x<=L-R ? S : x<=L ? S*(L-x)/R : 0.);\n"
"}\n"
"\n"
"float protokick(float t, float f_start, float f_end, float fdecay, float hold, float decay, float drive, float detune, float rev_amount, float rev_hold, float rev_decay, float rev_drive)\n"
"{\n"
"    float phi = drop_phase(t, fdecay, f_start, f_end);\n"
"    float rev_phi = phi + reverb_phase(t, 1.);\n"
"    return clamp(drive*.5*(_sin(phi)+_sin((1.-detune)*phi)),-1.,1.) * exp(-max(t-hold, 0.)/decay)\n"
"         + rev_amount*clamp(rev_drive*.5*(_sin(rev_phi)+_sin((1.-detune)*rev_phi)),-1.,1.) * exp(-max(t-rev_hold, 0.)/rev_decay);\n"
"} \n"
"\n"
"uniform float iBlockOffset;\n"
"uniform float iSampleRate;\n"
"uniform float iVolume;\n"
"uniform int iTexSize;\n"
"uniform sampler2D iSequence;\n"
"uniform float iSequenceWidth;\n"
"\n"
"// Read short value from texture at index off\n"
"float rshort(float off)\n"
"{\n"
"    float hilo = mod(off, 2.);\n"
"    off *= .5;\n"
"    vec2 ind = (vec2(mod(off, iSequenceWidth), floor(off/iSequenceWidth))+.05)/iSequenceWidth;\n"
"    vec4 block = texture(iSequence, ind);\n"
"    vec2 data = mix(block.rg, block.ba, hilo);\n"
"    return round(dot(vec2(255., 65280.), data));\n"
"}\n"
"\n"
"// Read float value from texture at index off\n"
"float rfloat(int off)\n"
"{\n"
"    float d = rshort(float(off));\n"
"    float sign = floor(d/32768.),\n"
"        exponent = floor(d/1024.-sign*32.),\n"
"        significand = d-sign*32768.-exponent*1024.;\n"
"\n"
"    if(exponent == 0.)\n"
"         return mix(1., -1., sign) * 5.960464477539063e-08 * significand;\n"
"    return mix(1., -1., sign) * (1. + significand * 9.765625e-4) * pow(2.,exponent-15.);\n"
"}\n"
"\n"
"#define NTRK 2\n"
"#define NMOD 20\n"
"#define NPTN 2\n"
"#define NNOT 27\n"
"#define NDRM 10\n"
"\n"
"int trk_sep(int index)      {return int(rfloat(index));}\n"
"int trk_syn(int index)      {return int(rfloat(index+1+1*NTRK));}\n"
"float trk_norm(int index)   {return     rfloat(index+1+2*NTRK);}\n"
"float trk_rel(int index)    {return     rfloat(index+1+3*NTRK);} // have to put that in: \"predraw\" - shift every B_on earlier (and call release \"prolong\")\n"
"float trk_pre(int index)    {return     rfloat(index+1+4*NTRK);}\n"
"float trk_slide(int index)  {return     rfloat(index+1+5*NTRK);} // idea for future: change to individual note_slide_time\n"
"float mod_on(int index)     {return     rfloat(index+1+6*NTRK);}\n"
"float mod_off(int index)    {return     rfloat(index+1+6*NTRK+1*NMOD);}\n"
"int mod_ptn(int index)      {return int(rfloat(index+1+6*NTRK+2*NMOD));}\n"
"float mod_transp(int index) {return     rfloat(index+1+6*NTRK+3*NMOD);}\n"
"int ptn_sep(int index)      {return int(rfloat(index+1+6*NTRK+4*NMOD));}\n"
"float note_on(int index)    {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN);}\n"
"float note_off(int index)   {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+1*NNOT);}\n"
"float note_pitch(int index) {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+2*NNOT);}\n"
"float note_pan(int index)   {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+3*NNOT);}\n"
"float note_vel(int index)   {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+4*NNOT);}\n"
"float note_slide(int index) {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+5*NNOT);}\n"
"float note_aux(int index)   {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+6*NNOT);}\n"
"float drum_rel(int index)   {return     rfloat(index+2+6*NTRK+4*NMOD+NPTN+7*NNOT);}\n"
"\n"
"vec2 mainSynth(float time)\n"
"{\n"
"    float sL = 0.;\n"
"    float sR = 0.;\n"
"    float dL = 0.;\n"
"    float dR = 0.;\n"
"\n"
"    time = mod(time, 35.833414);\n"
"    \n"
"    int _it;\n"
"    for(_it = 0; _it < NTIME - 2 && pos_t[_it + 1] < time; _it++);\n"
"    BPS = pos_BPS[_it];\n"
"    SPB = pos_SPB[_it];\n"
"    BT = pos_B[_it] + (time - pos_t[_it]) * BPS;\n"
"    \n"
"    float time2 = time - .0002;\n"
"    float sidechain = 1.;\n"
"\n"
"    float amaysynL, amaysynR, amaydrumL, amaydrumR, B, Bon, Boff, Bprog, Bproc, L, tL, _t, _t2, vel, rel, pre, f, amtL, amtR, env, slide, aux;\n"
"    int tsep0, tsep1, _modU, _modL, ptn, psep0, psep1, _noteU, _noteL, syn, drum;\n"
"\n"
"    for(int trk = 0; trk < NTRK; trk++)\n"
"    {\n"
"        tsep0 = trk_sep(trk);\n"
"        tsep1 = trk_sep(trk + 1);\n"
"\n"
"        syn = trk_syn(trk);\n"
"        rel = trk_rel(trk);\n"
"        pre = trk_pre(trk);\n"
" \n"
"        for(_modU = tsep0; (_modU < tsep1 - 1) && (BT > mod_on(_modU + 1) - pre); _modU++);             \n"
"        for(_modL = tsep0; (_modL < tsep1 - 1) && (BT >= mod_off(_modL) + rel); _modL++);\n"
"\n"
"        for(int _mod = _modL; _mod <= _modU; _mod++)\n"
"        {\n"
"            B = BT - mod_on(_mod);\n"
"\n"
"            ptn   = mod_ptn(_mod);\n"
"            psep0 = ptn_sep(ptn);\n"
"            psep1 = ptn_sep(ptn + 1);\n"
"                         \n"
"            for(_noteU = psep0; (_noteU < psep1 - 1) && (B > note_on(_noteU + 1) - pre); _noteU++);\n"
"            for(_noteL = psep0; (_noteL < psep1 - 1) && (B >= note_off(_noteL) + rel); _noteL++);\n"
"\n"
"            for(int _note = _noteL; _note <= _noteU; _note++)\n"
"            {\n"
"                if(syn == 35)\n"
"                {\n"
"                    drum = int(note_pitch(_note));\n"
"                    rel = drum_rel(drum);\n"
"                }\n"
"\n"
"                amaysynL  = 0.;\n"
"                amaysynR  = 0.;\n"
"                amaydrumL = 0.;\n"
"                amaydrumR = 0.;\n"
"\n"
"                Bon   = note_on(_note) - pre;\n"
"                Boff  = note_off(_note) + rel;\n"
"                L     = Boff - Bon;\n"
"                tL    = L * SPB;\n"
"                Bprog = B - Bon;\n"
"                Bproc = Bprog / L;\n"
"                _t    = Bprog * SPB;\n"
"                _t2   = _t - .0002;\n"
"                vel   = note_vel(_note);\n"
"                amtL  = clamp(1. - note_pan(_note), 0., 1.);\n"
"                amtR  = clamp(1. + note_pan(_note), 0., 1.);\n"
"                slide = note_slide(_note);\n"
"                aux   = note_aux(_note);\n"
"\n"
"                if(syn == 35)\n"
"                {\n"
"                    env = trk_norm(trk) * theta(Bprog) * theta(L - Bprog);\n"
"                    if(drum == 0) { sidechain = min(sidechain, 1. - vel * (clamp(1e4 * Bprog,0.,1.) - pow(Bprog/(L-rel),8.))); }\n"
"                    else if(drum == 8){\n"
"                        amaydrumL = vel*(vel*(clamp(1.32*_tri(drop_phase(_t,.06,308.,80.)),-1.,1.)*(1.-smoothstep(-1e-3,0.,_t-.15))+.82*clamp(.49*_tri(drop_phase(_t,.06,308.,80.)+.82*lpnoise(_t,4595.)),-1.,1.)*exp(-1.97*_t)+.09*lpnoise(_t,4032.)*(1.-smoothstep(0.,.97,_t-.79))+.1*lpnoise(_t,1111.)*exp(-_t*12.69)+.6*lpnoise(_t,7795.)*exp(-_t*1.08))*smoothstep(0.,.003,_t));\n"
"                        amaydrumR = vel*(vel*(clamp(1.32*_tri(drop_phase(_t2,.06,308.,80.)),-1.,1.)*(1.-smoothstep(-1e-3,0.,_t2-.15))+.82*clamp(.49*_tri(drop_phase(_t2,.06,308.,80.)+.82*lpnoise(_t2,4595.)),-1.,1.)*exp(-1.97*_t2)+.09*lpnoise(_t2,4032.)*(1.-smoothstep(0.,.97,_t2-.79))+.1*lpnoise(_t2,1111.)*exp(-_t2*12.69)+.6*lpnoise(_t2,7795.)*exp(-_t2*1.08))*smoothstep(0.,.003,_t2));\n"
"                    }\n"
"                    \n"
"                    dL += amtL * s_atan(env * amaydrumL);\n"
"                    dR += amtR * s_atan(env * amaydrumR);\n"
"                }\n"
"                else\n"
"                {\n"
"                    f = freqC1(note_pitch(_note) + mod_transp(_mod));\n"
"\n"
"                    if(abs(slide) > 1e-3) // THIS IS SLIDEY BIZ\n"
"                    {\n"
"                        float Bslide = trk_slide(trk);\n"
"                        float fac = slide * log(2.)/12.;\n"
"                        if (Bprog <= Bslide)\n"
"                        {\n"
"                            float help = 1. - Bprog/Bslide;\n"
"                            f *= Bslide * (fhelp(fac) - help * fhelp(fac*help*help)) / Bprog;\n"
"                        }\n"
"                        else\n"
"                        {\n"
"                            f *= 1. + (Bslide * (fhelp(fac)-1.)) / Bprog;\n"
"                        }\n"
"                    }\n"
"\n"
"                    env = theta(Bprog) * (1. - smoothstep(Boff-rel, Boff, B));\n"
"                    if(syn == 0){amaysynL = _sin(f*_t); amaysynR = _sin(f*_t2);}\n"
"                    else if(syn == 32){\n"
"                        amaysynL = (theta(Bprog)*exp(-11.*Bprog)*env_AHDSR(Bprog,L,.01,0.,.1+.5*vel,.01,.4)*clip((1.+theta(Bprog)*exp(-11.*Bprog))*_tri(f*_t+.2*env_AHDSR(Bprog,L,.5,1.,.1,1.,0.)*clip((1.+3.)*_sq_(1.99*f*_t,.3+2.*vel+.2*(2.*fract(3.97*f*_t)-1.)))+.2*vel*env_AHDSR(Bprog,L,.325,1.,.1,1.,0.)*(2.*fract(3.97*f*_t)-1.)))+.4*theta(Bprog)*exp(-11.*Bprog)*env_AHDSR(Bprog,L,.325,1.,.1,1.,0.)*clip((1.+3.)*_sq_(1.99*f*_t,.3+2.*vel+.2*(2.*fract(3.97*f*_t)-1.)))*env_AHDSR(Bprog,L,0.,0.,.2+.2*vel,.01,.4)+.4*env_AHDSR(Bprog,L,0.,0.,.05,0.,0.)*lpnoise(_t+0.,6000.+200.*note_pitch(_note)));\n"
"                        amaysynR = (theta(Bprog)*exp(-11.*Bprog)*env_AHDSR(Bprog,L,.01,0.,.1+.5*vel,.01,.4)*clip((1.+theta(Bprog)*exp(-11.*Bprog))*_tri(f*_t2+.2*env_AHDSR(Bprog,L,.5,1.,.1,1.,0.)*clip((1.+3.)*_sq_(1.99*f*_t2,.3+2.*vel+.2*(2.*fract(3.97*f*_t2)-1.)))+.2*vel*env_AHDSR(Bprog,L,.325,1.,.1,1.,0.)*(2.*fract(3.97*f*_t2)-1.)))+.4*theta(Bprog)*exp(-11.*Bprog)*env_AHDSR(Bprog,L,.325,1.,.1,1.,0.)*clip((1.+3.)*_sq_(1.99*f*_t2,.3+2.*vel+.2*(2.*fract(3.97*f*_t2)-1.)))*env_AHDSR(Bprog,L,0.,0.,.2+.2*vel,.01,.4)+.4*env_AHDSR(Bprog,L,0.,0.,.05,0.,0.)*lpnoise(_t2+0.,6000.+200.*note_pitch(_note)));\n"
"env = theta(Bprog)*pow(1.-smoothstep(Boff-rel, Boff, B),2);\n"
"                    }\n"
"                    \n"
"                    sL += amtL * s_atan(trk_norm(trk) * clamp(env,0.,1.) * amaysynL);\n"
"                    sR += amtR * s_atan(trk_norm(trk) * clamp(env,0.,1.) * amaysynR);\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    return vec2(s_atan(sidechain * sL + dL), s_atan(sidechain * sR + dR));\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"   float t = (iBlockOffset + (gl_FragCoord.x - .5) + (gl_FragCoord.y - .5)*iTexSize)/iSampleRate;\n"
"   vec2 y = mainSynth(t);\n"
"   vec2 v  = floor((0.5+0.5*y)*65535.0);\n"
"   vec2 vl = mod(v,256.0)/255.0;\n"
"   vec2 vh = floor(v/256.0)/255.0;\n"
"   gl_FragColor = vec4(vl.x,vh.x,vl.y,vh.y);\n"
"}\n"
"\n"
;
#endif
