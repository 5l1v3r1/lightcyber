/* Generated with shader-compressor by NR4/Team210. */
#ifndef UI_H
#define UI_H
const char * ui_frag =
"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n"
" * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n"
" *\n"
" * This program is free software: you can redistribute it and/or modify\n"
" * it under the terms of the GNU General Public License as published by\n"
" * the Free Software Foundation, either version 3 of the License, or\n"
" * (at your option) any later version.\n"
" *\n"
" * This program is distributed in the hope that it will be useful,\n"
" * but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
" * GNU General Public License for more details.\n"
" *\n"
" * You should have received a copy of the GNU General Public License\n"
" * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"
" */\n"
" \n"
" uniform float iTime;\n"
" uniform float iMaxTime;\n"
" uniform vec2 iMouse;\n"
" uniform float iPlaying;\n"
" uniform vec2 iResolution;\n"
" uniform sampler2D iChannel0;\n"
"\n"
"// Global constants\n"
"const float pi = acos(-1.);\n"
"const vec3 c = vec3(1.0, 0.0, -1.0);\n"
"float a = 1.0;\n"
"\n"
"void dlinesegment(in vec2 x, in vec2 p1, in vec2 p2, out float d)\n"
"{\n"
"    vec2 da = p2-p1;\n"
"    d = length(x-mix(p1, p2, clamp(dot(x-p1, da)/dot(da,da),0.,1.)));\n"
"}\n"
"\n"
"void stroke(in float d0, in float s, out float d)\n"
"{\n"
"    d = abs(d0)-s;\n"
"}\n"
"\n"
"float sm(float d)\n"
"{\n"
"    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n"
"}\n"
"\n"
"// compute distance to regular triangle\n"
"void dtriangle2(in vec2 uv, in float r, out float d)\n"
"{\n"
"    float dp = 2.*pi/3.;\n"
"    vec2 p0 = r*vec2(cos(pi/2.), -sin(pi/2.)),\n"
"        p1 = r*vec2(cos(pi/2.+dp), -sin(pi/2.+dp)),\n"
"        p2 = r*vec2(cos(pi/2.+2.*dp), -sin(pi/2.+2.*dp)), \n"
"        pd = p2-p1;\n"
"    \n"
"    d = min(dot(uv-p0,c.xz*(p1-p0).yx),dot(uv-p1, pd.yx*c.xz));\n"
"	d = min(d, dot(uv-p2, (p0-p2).yx*c.xz))/length(pd);\n"
"}\n"
"\n"
"// 2D box\n"
"void dbox(in vec2 x, in vec2 b, out float d)\n"
"{\n"
"	vec2 da = abs(x)-b;\n"
"	d = length(max(da,c.yy)) + min(max(da.x,da.y),0.0);\n"
"}\n"
"\n"
"void dpause2(in vec2 uv, in float r, out float d)\n"
"{\n"
"    dbox(vec2(abs(uv.x)-r/4.,uv.y), vec2(.15*r,.4*r), d);\n"
"}\n"
"\n"
"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n"
"{\n"
"    a = iResolution.x/iResolution.y;\n"
"    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0);\n"
"    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).rgb, ccol;\n"
"    float d = abs(uv.y+.45)-.05;\n"
"    \n"
"    // Play/pause controls\n"
"    ccol = mix(col,c.yyy,.5*sm(d));\n"
"    vec3 c1 = 2.*c.xxx;\n"
"    if(iPlaying == 0.) // Check if mouse is in play sign\n"
"    {\n"
"        dtriangle2(((iMouse.xy/iResolution.yy-.5*vec2(a,1.)-vec2(-.44*a,-.455))).yx*c.xz, .03, d);\n"
"    	c1 = mix(ccol, mix(c.xxx, c1, sm(-d)), .5);\n"
"        dtriangle2(((uv-vec2(-.44*a,-.455))).yx*c.xz, .03, d);\n"
"	    ccol = mix(ccol, c1, sm(-d));\n"
"    }\n"
"    else // Check if mouse is in pause sign\n"
"    {\n"
"        dpause2(((iMouse.xy/iResolution.yy-.5*vec2(a,1.)-vec2(-.44*a,-.455))), .05, d);\n"
"    	c1 = mix(ccol, mix(c.xxx, c1, sm(d)), .5);\n"
"        dpause2(((uv-vec2(-.44*a,-.455))), .05, d);\n"
"	    ccol = mix(ccol, c1, sm(d));\n"
"    }\n"
"    \n"
"    // Progress bar\n"
"    vec2 xpr = mix(vec2(-.3*a,-.45), vec2(.3*a,-.45), clamp(iTime/iMaxTime, 0., 1.));\n"
"    dlinesegment(iMouse.xy/iResolution.yy-.5*vec2(a,1.), vec2(-.3*a,-.45), vec2(.3*a, -.45), d);\n"
"    stroke(d, .0025, d);\n"
"    d = min(d, length(iMouse.xy/iResolution.yy-.5*vec2(a,1.)-xpr)-.015);\n"
"    c1 = mix(ccol, mix(c.xxx, 2.*c.xxx, sm(d)), .5);\n"
"    dlinesegment(uv, vec2(-.3*a,-.45), vec2(.3*a, -.45), d);\n"
"    stroke(d, .0025, d);\n"
"    d = min(d, length(uv-xpr)-.015);\n"
"    ccol = mix(ccol, c1, sm(d));\n"
"\n"
"    \n"
"    col = mix(ccol, col, smoothstep(.1,.2,iMouse.y/iResolution.y));\n"
"    \n"
"    dlinesegment(uv, vec2(-.9*a,-.9), vec2(.9*a, -.9), d);\n"
"    stroke(d, .01, d);\n"
"	\n"
"    fragColor = vec4(clamp(col,0.,1.),1.0);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    mainImage(gl_FragColor, gl_FragCoord.xy);\n"
"}\n"
"\n"
;
#endif
